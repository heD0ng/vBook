(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{397:function(v,_,e){"use strict";e.r(_);var a=e(7),t=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"cdn缓存的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cdn缓存的理解"}},[v._v("#")]),v._v(" CDN缓存的理解")]),v._v(" "),_("p",[_("code",[v._v("CDN")]),v._v("即内容分发网络"),_("code",[v._v("Content Delivery Network")]),v._v("，"),_("code",[v._v("CDN")]),v._v("的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，"),_("code",[v._v("CDN")]),v._v("的基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定，通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层虚拟网络，"),_("code",[v._v("CDN")]),v._v("系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上，其目的是使用户可就近取得所需内容，解决"),_("code",[v._v("Internet")]),v._v("网络拥挤的状况，提高用户访问网站的响应速度。")]),v._v(" "),_("h2",{attrs:{id:"组成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组成"}},[v._v("#")]),v._v(" 组成")]),v._v(" "),_("ul",[_("li",[v._v("从功能上看，"),_("code",[v._v("CDN")]),v._v("系统由分发服务系统、负载均衡系统和运营管理系统组成：分发服务系统主要负责资源的响应、缓存和同步。负载均衡系统主要负责均衡单点多个内容缓存设备的负载，并对内容进行缓存负载平衡及访问控制，以及对用户请求进行调度以及路由。运营管理系统则负责运营需求管理和网络系统管理。")]),v._v(" "),_("li",[v._v("从节点分布上看，"),_("code",[v._v("CDN")]),v._v("系统主要分为边缘层和中心层，边缘层分布在"),_("code",[v._v("CDN")]),v._v("网络的边缘位置，给用户提供就近访问服务，中心层则负责完成资源同步和运营管理等功能。中心层保存了加速域名的相关配置信息比如源站域名，也缓存了加速域名下的各种资源，在边缘层节点未命中缓存时，需要向中心层节点发起请求，而中心层节点未能命中缓存时，需要查找对应的源站域名，并向该源站域名发起请求，然后再逐层返回并缓存用户请求的资源。")])]),v._v(" "),_("h2",{attrs:{id:"功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[v._v("#")]),v._v(" 功能")]),v._v(" "),_("ul",[_("li",[v._v("节省骨干网带宽，减少带宽需求量。")]),v._v(" "),_("li",[v._v("降低通信风暴的影响，提高网络访问的稳定性。")]),v._v(" "),_("li",[v._v("提供服务器端加速，解决由于用户访问量大造成的服务器过载问题。")]),v._v(" "),_("li",[v._v("能克服网站用户分布不均的问题，并且能降低网站自身建设和维护成本。")]),v._v(" "),_("li",[v._v("提供资源访问缓存，实现相同对象的访问降低响应延迟，并减少主干网带宽占用。")])]),v._v(" "),_("h2",{attrs:{id:"关键技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关键技术"}},[v._v("#")]),v._v(" 关键技术")]),v._v(" "),_("ul",[_("li",[v._v("缓存算法决定命中率、源服务器压力、"),_("code",[v._v("POP")]),v._v("节点存储能力。")]),v._v(" "),_("li",[v._v("分发能力取决于"),_("code",[v._v("IDC")]),v._v("能力和"),_("code",[v._v("IDC")]),v._v("策略性分布。")]),v._v(" "),_("li",[v._v("负载均衡决定最佳路由、响应时间、可用性、服务质量。")]),v._v(" "),_("li",[v._v("基于"),_("code",[v._v("DNS")]),v._v("的负载均衡以"),_("code",[v._v("CNAME")]),v._v("实现最优节点服务。")]),v._v(" "),_("li",[v._v("缓存点有客户端浏览器缓存、本地"),_("code",[v._v("DNS")]),v._v("服务器缓存。")]),v._v(" "),_("li",[v._v("缓存内容有"),_("code",[v._v("DNS")]),v._v("地址缓存、客户请求内容缓存、动态内容缓存。")]),v._v(" "),_("li",[v._v("支持协议如静动态加速、图片加速、"),_("code",[v._v("HTTPS")]),v._v("带证书加速、下载加速等等。")])]),v._v(" "),_("h2",{attrs:{id:"配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[v._v("#")]),v._v(" 配置")]),v._v(" "),_("p",[v._v("使用"),_("code",[v._v("CDN")]),v._v("服务提供商的"),_("code",[v._v("CDN")]),v._v("服务时，需要做一些配置：")]),v._v(" "),_("ul",[_("li",[v._v("解析一个子域名，可以先随意解析到某个地址，例如是"),_("code",[v._v("cdn.example.com")]),v._v("。")]),v._v(" "),_("li",[v._v("到服务提供商添加该域名，并设置源站域名，例如是"),_("code",[v._v("www.example.com")]),v._v("。")]),v._v(" "),_("li",[v._v("此时服务商一般会分配一个"),_("code",[v._v("CNAME")]),v._v("地址，例如是"),_("code",[v._v("cdn.example.com.service.com")]),v._v("。")]),v._v(" "),_("li",[v._v("将第一步的域名添加"),_("code",[v._v("CNAME")]),v._v("记录为分配的"),_("code",[v._v("CNAME")]),v._v("地址。")]),v._v(" "),_("li",[v._v("或者服务商在第一步即提供了"),_("code",[v._v("CNAME")]),v._v("地址，那么直接解析即可。")])]),v._v(" "),_("h2",{attrs:{id:"访问流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#访问流程"}},[v._v("#")]),v._v(" 访问流程")]),v._v(" "),_("p",[v._v("简单的"),_("code",[v._v("CDN")]),v._v("的访问流程，这是一种"),_("code",[v._v("pull")]),v._v("的方式拉取缓存：")]),v._v(" "),_("ul",[_("li",[v._v("访问资源时，从上述的子域名中加载资源文件，"),_("code",[v._v("DNS")]),v._v("解析该域名。")]),v._v(" "),_("li",[v._v("返回"),_("code",[v._v("CNAME")]),v._v("地址，之后解析"),_("code",[v._v("CNAME")]),v._v("地址。")]),v._v(" "),_("li",[v._v("获得"),_("code",[v._v("CNAME")]),v._v("域名对应的"),_("code",[v._v("IP")]),v._v("地址，指向"),_("code",[v._v("CDN")]),v._v("边缘层节点。")]),v._v(" "),_("li",[_("code",[v._v("CDN")]),v._v("边缘层节点未命中资源缓存，则向中心层节点请求。")]),v._v(" "),_("li",[v._v("中心层节点未命中资源缓存，则进行回源，到源站域名服务器获取资源。")]),v._v(" "),_("li",[v._v("成功获取资源后逐层返回并将资源缓存。")]),v._v(" "),_("li",[v._v("在这个查找资源的过程中域名可能会发生变化，但是资源的"),_("code",[v._v("path")]),v._v("是不会变化的。")]),v._v(" "),_("li",[v._v("之后再进行访问，则直接能够从边缘节点取得缓存而不用回源，加快资源访问速度。")])]),v._v(" "),_("h2",{attrs:{id:"缓存控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存控制"}},[v._v("#")]),v._v(" 缓存控制")]),v._v(" "),_("p",[v._v("在计算机中有两大难题，一是缓存何时失效，二是如何命名，而"),_("code",[v._v("CDN")]),v._v("中缓存何时失效是一个比较麻烦的问题，假如源站的资源文件发生变化，而用户此时取得的资源是从缓存节点中取得的，此时就会造成资源文件不一致的现象，解决这个问题可以通过主动"),_("code",[v._v("push")]),v._v("刷新所有"),_("code",[v._v("CDN")]),v._v("缓存的方式来实现，但是这种方式成本较高，比较简单的解决方案就是在固定时间段过后便使缓存失效，除了节点的缓存需要控制，还需要控制用户本地缓存，在"),_("code",[v._v("HTTP")]),v._v("协议中提供了如下缓存控制的方式：")]),v._v(" "),_("h3",{attrs:{id:"强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[v._v("#")]),v._v(" 强缓存")]),v._v(" "),_("p",[v._v("强缓存是通过"),_("code",[v._v("Expires")]),v._v("与"),_("code",[v._v("Cache-Control")]),v._v("来控制缓存在本地的有效期。")]),v._v(" "),_("h4",{attrs:{id:"expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[v._v("#")]),v._v(" Expires")]),v._v(" "),_("p",[_("code",[v._v("Expires")]),v._v("是"),_("code",[v._v("HTTP 1.0")]),v._v("提出的一个表示资源过期时间的"),_("code",[v._v("Header")]),v._v("，它描述的是一个绝对时间，由服务器返回。"),_("code",[v._v("Expires")]),v._v("受限于本地时间，如果修改了本地时间，可能会造成缓存失效.对于资源的请求，如果在"),_("code",[v._v("Expires")]),v._v("之内，则浏览器会直接读取缓存，不再请求服务器。")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("Expires: Sun, 14 Jun 2020 02:50:57 GMT\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("h4",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[v._v("#")]),v._v(" Cache-Control")]),v._v(" "),_("p",[_("code",[v._v("Cache-Control")]),v._v("出现于"),_("code",[v._v("HTTP 1.1")]),v._v("，优先级高于"),_("code",[v._v("Expires")]),v._v("，表示的是相对时间，请求头和响应头都支持这个属性，通过它提供的不同的值来定义缓存策略。")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("Cache-Control: max-age=300\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("ul",[_("li",[_("code",[v._v("Cache-Control: no-store")]),v._v(": 缓存中不得存储任何关于客户端请求和服务端响应的内容，每次由客户端发起的请求都会下载完整的响应内容。")]),v._v(" "),_("li",[_("code",[v._v("Cache-Control: no-cache")]),v._v(": 缓存中会存储服务端响应的内容，只是在与服务端进行新鲜度再验证之前，该缓存不能够提供给浏览器使用。简单来说，就是浏览器会将服务端响应的资源进行缓存，但是在每次请求时，缓存都要向服务端评估缓存响应的有效性，协商缓存是否可用，根据响应是"),_("code",[v._v("304")]),v._v("还是"),_("code",[v._v("200")]),v._v("判断是使用本地缓存资源还是使用服务器响应的资源。")]),v._v(" "),_("li",[_("code",[v._v("Cache-Control: public || private")]),v._v(": "),_("code",[v._v("public")]),v._v("表示该响应可以被任何中间人比如中间代理、"),_("code",[v._v("CDN")]),v._v("等缓存。默认响应为"),_("code",[v._v("private")]),v._v("，"),_("code",[v._v("private")]),v._v("表示该响应是专用的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。")]),v._v(" "),_("li",[_("code",[v._v("Cache-Control: max-age=31536000")]),v._v(": 响应为最大的过期时间，其指令是"),_("code",[v._v("max-age=<seconds>")]),v._v("，表示资源能够被缓存即保持新鲜的最大时间，"),_("code",[v._v("max-age")]),v._v("是距离请求发起的时间的秒数。")]),v._v(" "),_("li",[_("code",[v._v("Cache-Control: must-revalidate")]),v._v(": 当使用了"),_("code",[v._v("must-revalidate")]),v._v("指令，那就意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。在正常情况下是没有必要使用这个指令的，因为在强缓存过期的情况下会进行协商缓存，但是"),_("code",[v._v("HTTP")]),v._v("规范是允许客户端在某些特殊情况下直接使用过期缓存的，比如校验请求发送失败的时候，还比如有配置一些特殊指令"),_("code",[v._v("stale-while-revalidate")]),v._v("、"),_("code",[v._v("stale-if-error")]),v._v("等的时候，"),_("code",[v._v("must-revalidate")]),v._v("指令就是让缓存在过期后的任何情况下都必须重新验证。")])]),v._v(" "),_("h3",{attrs:{id:"协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),_("p",[v._v("当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的"),_("code",[v._v("HTTP")]),v._v("状态为"),_("code",[v._v("304 (Not Modified)")]),v._v("，该请求不携带实体数据，若未命中，则返回"),_("code",[v._v("200")]),v._v("并携带资源实体数据。协商缓存是利用的是"),_("code",[v._v("Last-Modified，If-Modified-Since")]),v._v("和"),_("code",[v._v("ETag、If-None-Match")]),v._v("这两对"),_("code",[v._v("Header")]),v._v("来管理的。")]),v._v(" "),_("h4",{attrs:{id:"last-modified-if-modified-since"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[v._v("#")]),v._v(" Last-Modified If-Modified-Since")]),v._v(" "),_("p",[_("code",[v._v("Last-Modified，If-Modified-Since")]),v._v("是"),_("code",[v._v("HTTP 1.0")]),v._v("引入的，"),_("code",[v._v("Last-Modified")]),v._v("表示本地文件最后修改日期，浏览器会在请求头加上"),_("code",[v._v("If-Modified-Since")]),v._v("即上次响应的"),_("code",[v._v("Last-Modified")]),v._v("的值，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，但是如果在本地打开缓存文件，就会造成"),_("code",[v._v("Last-Modified")]),v._v("被修改，所以在"),_("code",[v._v("HTTP 1.1")]),v._v("出现了"),_("code",[v._v("ETag")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"etag-if-none-match"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[v._v("#")]),v._v(" ETag If-None-Match")]),v._v(" "),_("p",[_("code",[v._v("Etag")]),v._v("就像一个指纹，资源变化都会导致"),_("code",[v._v("ETag")]),v._v("变化，跟最后修改时间没有关系，"),_("code",[v._v("ETag")]),v._v("可以保证每一个资源是唯一的，"),_("code",[v._v("If-None-Match")]),v._v("的请求头字段会将上次返回的"),_("code",[v._v("Etag")]),v._v("发送给服务器，询问该资源的"),_("code",[v._v("Etag")]),v._v("是否有更新，有变动就会发送新的资源回来。"),_("code",[v._v("ETag")]),v._v("的优先级比"),_("code",[v._v("Last-Modified")]),v._v("更高，具体使用"),_("code",[v._v("ETag")]),v._v("主要出于下面几种情况考虑：")]),v._v(" "),_("ul",[_("li",[v._v("一些文件也许会周期性的更改，但是他的内容并不改变，比如仅仅改变的修改时间，这个时候我们并不希望客户端认为这个文件被修改了，而重新"),_("code",[v._v("GET")]),v._v("。")]),v._v(" "),_("li",[v._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，例如"),_("code",[v._v("1s")]),v._v("内修改了"),_("code",[v._v("N")]),v._v("次，"),_("code",[v._v("If-Modified-Since")]),v._v("能检查到的粒度是秒级的，这种修改无法判断。")]),v._v(" "),_("li",[v._v("某些服务器不能精确的得到文件的最后修改时间。")])]),v._v(" "),_("h2",{attrs:{id:"每日一题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[v._v("#")]),v._v(" 每日一题")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("https://github.com/WindrunnerMax/EveryDay\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[v._v("#")]),v._v(" 参考")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("https://zhuanlan.zhihu.com/p/40682772\nhttps://baike.baidu.com/item/CDN/420951\nhttps://juejin.im/post/6844904190913822727\nhttps://juejin.im/post/6844903906296725518\nhttps://juejin.im/post/6844903605888090125\nhttps://blog.csdn.net/pedrojuliet/article/details/78394732\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br")])])])}),[],!1,null,null,null);_.default=t.exports}}]);