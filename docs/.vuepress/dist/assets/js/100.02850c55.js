(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{412:function(s,a,e){"use strict";e.r(a);var n=e(7),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"什么是npm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是npm"}},[s._v("#")]),s._v(" 什么是npm？")]),s._v(" "),a("p",[s._v("npm 的全称是 Node Package Manager，是随同 NodeJS 一起安装的包管理和分发工具，它很方便让 JavaScript 开发者下载、安装、上传以及管理已经安装的包。")]),s._v(" "),a("h2",{attrs:{id:"为什么要使用-npm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用-npm"}},[s._v("#")]),s._v(" 为什么要使用 NPM")]),s._v(" "),a("p",[s._v("npm 是 Node.js 官方提供的包管理工具，他已经成了 Node.js 包的标准发布平台，还提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。")]),s._v(" "),a("ul",[a("li",[s._v("允许用户从 npm 服务器下载别人编写的第三方包到本地使用。")]),s._v(" "),a("li",[s._v("允许用户从 npm 服务器下载并安装别人编写的命令行程序到本地使用。")]),s._v(" "),a("li",[s._v("允许用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用。\nnpm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。")])]),s._v(" "),a("h2",{attrs:{id:"如何使用npm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用npm"}},[s._v("#")]),s._v(" 如何使用NPM？")]),s._v(" "),a("h3",{attrs:{id:"npm安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm安装"}},[s._v("#")]),s._v(" npm安装")]),s._v(" "),a("blockquote",[a("p",[s._v("node官网：https://nodejs.org/zh-cn\nnpm 不需要单独安装。在安装 Node 的时候，会连带一起安装 npm 。但 Node 附带的 npm 可能不是最新版本，最后用下面的命令，更新到最新版本。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 查看node版本\nnode -v\n// 查看npm版本\nnpm -v   \n// Window：更新最新版本\nnpm install npm -g\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[s._v("#")]),s._v(" 初始化")]),s._v(" "),a("p",[s._v("在项目中引导创建一个 package.json 文件，安装包的信息可保持到项目的 package.json 文件中，以便后续的其它的项目开发或者他人合作使用，也说 package.json 在项目中是必不可少的。"),a("code",[s._v("npm init -y")]),s._v(" 用来初始化生成 package.json 文件。后续根据需求对package.json进行修改。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm init -y\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"依赖安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖安装"}},[s._v("#")]),s._v(" 依赖安装")]),s._v(" "),a("p",[s._v("默认情况下，在哪个文件夹下运行 npm，npm 就在当前目录创建一个文件夹 node_modules，然后将依赖安装到文件夹 node_modules 里面。 这时候其他路径项目无法引用到该目录下的模块！对于依赖的安装，我们会区分开发依赖以及生产依赖，对此也有一些不同的安装标志，这里也讲述相应的差别，这里以echart为例进行对比；")]),s._v(" "),a("h4",{attrs:{id:"安装方式对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装方式对比"}},[s._v("#")]),s._v(" 安装方式对比")]),s._v(" "),a("p",[s._v("**npm install echarts **")]),s._v(" "),a("ul",[a("li",[s._v("与"),a("strong",[s._v("npm install echarts -s")]),s._v("行为一致；\n**npm install echarts -S **")]),s._v(" "),a("li",[s._v("会把 echarts 包安装到 node_modules 目录中")]),s._v(" "),a("li",[s._v("会在 package.json的dependencies 属性下添加 echarts")]),s._v(" "),a("li",[s._v("运行 npm install 命令时，会自动安装 echarts到node_modules 目录中")]),s._v(" "),a("li",[s._v("NODE_ENV为 production时，会自动安装 echarts 到 node_modules 目录中\n**npm install echarts -D **")]),s._v(" "),a("li",[s._v("会把 echarts 包安装到 node_modules 目录中")]),s._v(" "),a("li",[s._v("会在 package.json的devDependencies 属性下添加 echarts")]),s._v(" "),a("li",[s._v("运行 npm install 命令时，会自动安装 echarts 到node_modules 目录中")]),s._v(" "),a("li",[s._v("NODE_ENV为 production时，不会自动安装 echarts 到 node_modules 目录中")])]),s._v(" "),a("h4",{attrs:{id:"指定版本安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定版本安装"}},[s._v("#")]),s._v(" 指定版本安装")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm i vue@2.5.15\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"卸载安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卸载安装"}},[s._v("#")]),s._v(" 卸载安装")]),s._v(" "),a("p",[s._v("如果你不想转到 package.json 文件并手动删除依赖包，则可以用以下方法删除：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm uninstall vue\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),a("p",[s._v("用得比较多的就是清理缓存")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm cache clean\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),a("p",[s._v("查看npm的配置列表")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm config list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"查看帮助"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看帮助"}},[s._v("#")]),s._v(" 查看帮助")]),s._v(" "),a("p",[s._v("查看npm命令帮助")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm help\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布"}},[s._v("#")]),s._v(" 发布")]),s._v(" "),a("p",[s._v("在发布node包之前，首先需要登录用户。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm adduser\n// 输入账号、密码\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后，发布依赖到npm社区。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm publish\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"软链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软链接"}},[s._v("#")]),s._v(" 软链接")]),s._v(" "),a("p",[s._v("使用以下命令可以将本地的npm包链接到全局环境中，从而可以在其他项目中使用该包。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm link\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"package-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package-json"}},[s._v("#")]),s._v(" package.json")]),s._v(" "),a("h3",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("name")]),s._v("： 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。")]),s._v(" "),a("li",[a("strong",[s._v("description")]),s._v("：包的简要说明、简介，方便在npm search中搜索")]),s._v(" "),a("li",[s._v("version: 符合语义化版本识别规范的版本字符串。")]),s._v(" "),a("li",[s._v("main：包的入口文件；")]),s._v(" "),a("li",[a("strong",[s._v("dependencies")]),s._v(": 包的依赖，一个关联数组，由包名称和版本号组成。依赖是给一组包名指定版本范围的一个hash。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用tarball或者git URL。")]),s._v(" "),a("li",[a("strong",[s._v("devDependencies")]),s._v("：适用于开发环境的依赖包。")]),s._v(" "),a("li",[s._v("peerDependencies：防止包重复安装的字段。")]),s._v(" "),a("li",[a("strong",[s._v("scripts：")]),s._v(" “scripts” 是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。")]),s._v(" "),a("li",[a("strong",[s._v("keywords")]),s._v(": 关键字，数组、字符串，通常用于搜索。方便在"),a("code",[s._v("npm search")]),s._v("中搜索")]),s._v(" "),a("li",[a("strong",[s._v("bugs")]),s._v(": 提交 bug 的地址，可以是网址或者电子邮件地址。")]),s._v(" "),a("li",[a("strong",[s._v("licenses")]),s._v(": 许可证数组，每个元素要包含 type（许可证的名称）和 url（链接到许可证文本的地址）字段。")]),s._v(" "),a("li",[a("strong",[s._v("repositories")]),s._v(": 仓库托管地址数组，每个元素要包含 type（仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。")])]),s._v(" "),a("h3",{attrs:{id:"dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[s._v("#")]),s._v(" dependencies")]),s._v(" "),a("ul",[a("li",[s._v("^1.2.3：>=1.2.3 <2.0.0；")]),s._v(" "),a("li",[s._v("~1.2.3：>=1.2.3 <1.3.0")])]),s._v(" "),a("h3",{attrs:{id:"scripts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scripts"}},[s._v("#")]),s._v(" scripts")]),s._v(" "),a("p",[s._v("npm 允许在package.json文件里面，使用scripts字段定义脚本命令。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "scripts": {\n    "build": "node build.js"\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("此时，执行 "),a("code",[s._v("npm run build")]),s._v("  等价于 "),a("code",[s._v("node build.js")]),s._v("。这些定义统称为 npm 脚本，其优点很多。")]),s._v(" "),a("ul",[a("li",[s._v("项目的相关脚本，可以集中在一个地方。")]),s._v(" "),a("li",[s._v("不同项目的脚本命令，只要功能相同，就可以有同样的对外接口。用户不需要知道怎么测试你的项目，只要运行"),a("code",[s._v("npm run test")]),s._v("即可。")]),s._v(" "),a("li",[s._v("可以利用 npm 提供的很多辅助功能。")])])])}),[],!1,null,null,null);a.default=t.exports}}]);