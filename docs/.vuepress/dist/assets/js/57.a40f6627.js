(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{369:function(e,t,o){"use strict";o.r(t);var v=o(7),_=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"element对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#element对象"}},[e._v("#")]),e._v(" Element对象")]),e._v(" "),t("p",[t("code",[e._v("Element")]),e._v("是一个通用性非常强的基类，所有"),t("code",[e._v("Document")]),e._v("对象下的对象都继承自它，这个对象描述了所有相同种类的元素所普遍具有的方法和属性，一些接口继承自"),t("code",[e._v("Element")]),e._v("并且增加了一些额外功能的接口描述了具体的行为，例如"),t("code",[e._v("HTMLElement")]),e._v("接口是所有"),t("code",[e._v("HTML")]),e._v("元素的基本接口，而"),t("code",[e._v("SVGElement")]),e._v("接口是所有"),t("code",[e._v("SVG")]),e._v("元素的基础，大多数功能是在这个类的更深层级的接口中被进一步制定的。")]),e._v(" "),t("h2",{attrs:{id:"属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("p",[e._v("所有属性继承自它的祖先接口"),t("code",[e._v("Node")]),e._v("，并且扩展了"),t("code",[e._v("Node")]),e._v("的父接口"),t("code",[e._v("EventTarget")]),e._v("，并且从"),t("code",[e._v("ParentNode")]),e._v("、"),t("code",[e._v("ChildNode")]),e._v("、"),t("code",[e._v("NonDocumentTypeChildNode")]),e._v("和"),t("code",[e._v("Animatable")]),e._v("承了属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Element.prototype.attributes")]),e._v(": 只读，返回一个与该元素相关的所有属性集合"),t("code",[e._v("NamedNodeMap")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.classList")]),e._v(": 只读，返回该元素包含的"),t("code",[e._v("class")]),e._v("属性，是一个"),t("code",[e._v("DOMTokenList")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.className")]),e._v(": 一个"),t("code",[e._v("DOMString")]),e._v("，表示这个元素的"),t("code",[e._v("class")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.clientHeight")]),e._v(": 只读，返回"),t("code",[e._v("Number")]),e._v("表示内部相对于外层元素的高度。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.clientLeft")]),e._v(": 只读，返回"),t("code",[e._v("Number")]),e._v("表示该元素距离它左边界的宽度。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.clientTop")]),e._v(": 只读，返回"),t("code",[e._v("Number")]),e._v("表示该元素距离它上边界的高度。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.clientWidth")]),e._v(": 只读，返回"),t("code",[e._v("Number")]),e._v("表示该元素内部的宽度。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.computedName")]),e._v(": 只读，返回一个"),t("code",[e._v("DOMString")]),e._v("，其中包含公开给可访问性的标签。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.computedRole")]),e._v(": 只读，返回一个"),t("code",[e._v("DOMString")]),e._v("，其中包含应用于特定元素的"),t("code",[e._v("ARIA")]),e._v("角色。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.id")]),e._v(": 是一个"),t("code",[e._v("DOMString")]),e._v("表示这个元素的"),t("code",[e._v("id")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.innerHTML")]),e._v(": 返回一个"),t("code",[e._v("DOMString")]),e._v("，表示这个元素的内容文本。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.localName")]),e._v(": 只读，返回一个"),t("code",[e._v("DOMString")]),e._v("表示这个元素名称本地化的部分。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.namespaceURI")]),e._v(": 只读，元素对应的"),t("code",[e._v("namespace URI")]),e._v("，如果没有则返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("NonDocumentTypeChildNode.nextElementSibling")]),e._v(": 只读，返回一个"),t("code",[e._v("Element")]),e._v("表示该元素下一个兄弟节点，如果为"),t("code",[e._v("null")]),e._v("表示不存在。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.outerHTML")]),e._v(":返回一个"),t("code",[e._v("DOMString")]),e._v("，获取该"),t("code",[e._v("DOM")]),e._v("元素及其后代的"),t("code",[e._v("HTML")]),e._v("文本，在设置它的时候，会从给定的字符串开始解析，替换自身。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.prefix")]),e._v(": 只读，表示元素的名称空间前缀的"),t("code",[e._v("DOMString")]),e._v("，如果未指定前缀，则为"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("NonDocumentTypeChildNode.prototype.previousElementSibling")]),e._v(": 只读，返回一个"),t("code",[e._v("Element")]),e._v("表示该元素上一个兄弟节点, 如果为"),t("code",[e._v("null")]),e._v("表示不存在。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollHeight")]),e._v(": 只读，返回类型为"),t("code",[e._v("Number")]),e._v("，表示元素的滚动视图高度。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollLeft")]),e._v(": 返回类型为"),t("code",[e._v("Number")]),e._v("，表示该元素横向滚动条距离最左的位移。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollLeftMax")]),e._v(": 只读，返回类型为"),t("code",[e._v("Number")]),e._v("表示该元素横向滚动条可移动的最大值。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollTop")]),e._v(": 返回类型为"),t("code",[e._v("Number")]),e._v("，表示该元素纵向滚动条距离。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollTopMax")]),e._v(": 只读，返回类型为"),t("code",[e._v("Number")]),e._v("，表示该元素纵向滚动条可移动的最大值。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollWidth")]),e._v(": 只读，返回类型为"),t("code",[e._v("Number")]),e._v("，表示元素的滚动视图宽度。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.shadowRoot")]),e._v(": 只读，返回由元素托管的开放"),t("code",[e._v("shadowRoot")]),e._v("，如果没有开放的"),t("code",[e._v("shadowRoot")]),e._v("，则返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.openOrClosedShadowRoot")]),e._v(": 只读，返回由元素托管的"),t("code",[e._v("shadowRoot")]),e._v("，无论其打开还是关闭，仅适用于"),t("code",[e._v("WebExtensions")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.slot")]),e._v(": 返回插入元素的"),t("code",[e._v("DOM")]),e._v("插槽的名称。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.tabStop")]),e._v(": 返回一个布尔值，指示元素是否可以通过"),t("code",[e._v("Tab")]),e._v("键接收输入焦点。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.tagName")]),e._v(": 只读，返回一个带有给定元素标记名称的字符串。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.undoManager")]),e._v(": 只读，返回与元素关联的"),t("code",[e._v("UndoManager")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.undoScope")]),e._v(": 返回一个布尔值，指示该元素是否是撤消作用域主机。")]),e._v(" "),t("li",[t("code",[e._v("Slotable.prototype.assignedSlot")]),e._v(": 只读，返回"),t("code",[e._v("HTMLSlotElement")]),e._v("，表示节点所插入的"),t("code",[e._v("<solt>")]),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("p",[e._v("从其父节点及其父节点"),t("code",[e._v("EventTarget")]),e._v("继承方法，并实现"),t("code",[e._v("ParentNode")]),e._v("、"),t("code",[e._v("ChildNode")]),e._v("、"),t("code",[e._v("NonDocumentTypeChildNode")]),e._v("和"),t("code",[e._v("Animatable")]),e._v("的方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("EventTarget.prototype.addEventListener()")]),e._v(": 将事件处理程序注册到元素上的特定事件类型。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.attachShadow()")]),e._v(": 将一个"),t("code",[e._v("shadow DOM")]),e._v("树附加到指定的元素，并返回对其"),t("code",[e._v("ShadowRoot")]),e._v("的引用。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.animate()")]),e._v(": 在元素上创建和运行动画的快捷方法，返回创建的动画对象实例。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.closest()")]),e._v(": 返回与参数中给定的选择器匹配的当前元素或当前元素本身的最接近祖先的"),t("code",[e._v("Element")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.createShadowRoot()")]),e._v(": 在元素上创建"),t("code",[e._v("shadow DOM")]),e._v("，将其转换为"),t("code",[e._v("shadow host")]),e._v("，返回"),t("code",[e._v("ShadowRoot")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.computedStyleMap()")]),e._v(": 返回"),t("code",[e._v("StylePropertyMapReadOnly")]),e._v("接口，该接口提供"),t("code",[e._v("CSS")]),e._v("声明块的只读表示形式，它是"),t("code",[e._v("CSSStyleDeclaration")]),e._v("的替代形式。")]),e._v(" "),t("li",[t("code",[e._v("EventTarget.dispatchEvent()")]),e._v(": 将事件调度到"),t("code",[e._v("DOM")]),e._v("中的此节点，并返回一个布尔值，该布尔值指示是否没有处理程序取消该事件。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getAnimations()")]),e._v(": 返回当前在元素上活动的"),t("code",[e._v("Animation")]),e._v("对象的数组。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getAttribute()")]),e._v(": 从当前节点检索命名属性的值，并将其作为对象返回。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getAttributeNames()")]),e._v(": 返回当前元素的属性名称数组。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getAttributeNS()")]),e._v(": 从当前节点检索具有指定名称和名称空间的属性的值，并将其作为对象返回。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getAttributeNode()")]),e._v(": 从当前节点检索命名属性的节点表示形式，并将其作为属性返回。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getAttributeNodeNS()")]),e._v(": 从当前节点检索具有指定名称和名称空间的属性的节点表示形式，并将其作为属性返回。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getBoundingClientRect()")]),e._v(": 返回元素的大小及其相对于视口的位置。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getClientRects()")]),e._v(": 返回矩形的集合，这些矩形指示客户端中每行文本的边框。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getElementsByClassName()")]),e._v(": 参数中给出类的列表，返回一个动态的"),t("code",[e._v("HTMLCollection")]),e._v("，包含了所有持有这些类的后代元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getElementsByTagName()")]),e._v(": 返回一个动态的"),t("code",[e._v("HTMLCollection")]),e._v("，包含当前元素中特定标记名称的所有后代元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.getElementsByTagNameNS()")]),e._v(": 返回一个动态的"),t("code",[e._v("HTMLCollection")]),e._v("，包含当前元素中特定标记名称和命名空间的所有后代元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.hasAttribute()")]),e._v(": 返回一个布尔值，指示元素是否具有指定的属性。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.hasAttributeNS()")]),e._v(":返回一个布尔值，指示元素在指定的名称空间中是否具有指定的属性。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.hasAttributes()")]),e._v(": 返回一个布尔值，指示元素是否有一个或多个"),t("code",[e._v("HTML")]),e._v("属性。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.hasPointerCapture()")]),e._v(": 指示在其上被调用的元素是否具有由给定指针"),t("code",[e._v("ID")]),e._v("标识的指针的指针捕获。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.insertAdjacentElement()")]),e._v(": 将一个给定的元素节点插入到相对于调用它的元素的给定位置。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.insertAdjacentHTML()")]),e._v(": 将文本解析为"),t("code",[e._v("HTML")]),e._v("或"),t("code",[e._v("XML")]),e._v("，并将结果节点插入给定位置的树中。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.insertAdjacentText()")]),e._v(": 在相对于调用它的元素的给定位置插入给定的文本节点。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.matches()")]),e._v(": 返回一个布尔值，指示指定的选择器字符串是否选择该元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.pseudo()")]),e._v(": 返回一个"),t("code",[e._v("CSSPseudoElement")]),e._v("，它表示由指定的伪元素选择器匹配的子伪元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.querySelector()")]),e._v(": 返回与指定的选择器字符串相对于元素匹配的第一个"),t("code",[e._v("Node")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.querySelectorAll()")]),e._v(": 返回与指定的选择器字符串相对于元素匹配的节点的"),t("code",[e._v("NodeList")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.releasePointerCapture()")]),e._v(": 释放(停止)先前为特定指针事件设置的指针捕获。")]),e._v(" "),t("li",[t("code",[e._v("ChildNode.prototype.remove()")]),e._v(": 从其父级的子级列表中删除该元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.removeAttribute()")]),e._v(": 从当前节点中移除命名属性。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.removeAttributeNS()")]),e._v(": 从当前节点中删除具有指定名称和名称空间的属性。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.removeAttributeNode()")]),e._v(": 从当前节点中删除命名属性的节点表示形式。")]),e._v(" "),t("li",[t("code",[e._v("EventTarget.prototype.removeEventListener()")]),e._v(": 从元素中移除事件监听器。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.requestFullscreen()")]),e._v(": 异步请求浏览器将元素设置为全屏。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.requestPointerLock()")]),e._v(": 允许异步请求将指针锁定在给定元素上。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scroll()")]),e._v(": 滚动到给定元素内的一组特定坐标。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollBy()")]),e._v(": 按给定量滚动元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollIntoView()")]),e._v(": 滚动页面，直到元素进入视图。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.scrollTo()")]),e._v(": 滚动到给定元素内的一组特定坐标。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.setAttribute()")]),e._v(": 设置当前节点的命名属性的值。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.setAttributeNS()")]),e._v(": 使用指定的名称和名称空间从当前节点设置属性的值。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.setAttributeNode()")]),e._v(": 从当前节点设置命名属性的节点表示形式。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.setAttributeNodeNS()")]),e._v(": 从当前节点设置具有指定名称和名称空间的属性的节点表示形式。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.setCapture()")]),e._v(": 设置鼠标事件捕获，将所有鼠标事件重定向到此元素。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.setPointerCapture()")]),e._v(": 指定一个特定元素作为将来指针事件的捕获目标。")]),e._v(" "),t("li",[t("code",[e._v("Element.prototype.toggleAttribute()")]),e._v(": 在指定元素上切换布尔属性，如果布尔属性存在，则将其删除，如果布尔属性不存在，则将其添加。")])]),e._v(" "),t("h2",{attrs:{id:"每日一题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[e._v("#")]),e._v(" 每日一题")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("https://github.com/WindrunnerMax/EveryDay\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("https://developer.mozilla.org/zh-CN/docs/Web/API/Element\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])])}),[],!1,null,null,null);t.default=_.exports}}]);